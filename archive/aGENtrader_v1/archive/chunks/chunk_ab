ice
        high_price = price * random.uniform(1.0, 1.02)  # 0% to 2% higher
        low_price = price * random.uniform(0.98, 1.0)   # 0% to 2% lower
        close_price = price
        
        # Generate volume
        volume = random.uniform(100, 1000) * (price / 10000)  # Higher price, higher volume
        
        # Add data point
        data_point = {
            "symbol": symbol,
            "timestamp": current_time.isoformat(),
            "open": round(open_price, 2),
            "high": round(high_price, 2),
            "low": round(low_price, 2),
            "close": round(close_price, 2),
            "volume": round(volume, 2)
        }
        data.append(data_point)
        
        # Move to next interval
        current_time += timedelta(minutes=interval_minutes)
    
    logger.info(f"Generated {len(data)} data points")
    return data

def run_simple_backtest(data: List[Dict[str, Any]], initial_balance: float = 10000.0, risk_per_trade: float = 0.02) -> Dict[str, Any]:
    """
    Run a simple backtest on the provided data.
    
    Args:
        data: Market data
        initial_balance: Initial account balance
        risk_per_trade: Risk per trade as percentage of account
        
    Returns:
        Backtest results
    """
    logger.info(f"Running simple backtest with initial balance ${initial_balance} and risk {risk_per_trade:.1%}")
    
    balance = initial_balance
    position = None
    trades = []
    equity_curve = []
    max_balance = initial_balance
    min_balance = initial_balance
    
    # Simple moving average strategy
    short_window = 5
    long_window = 20
    
    # Only trade on a subset of the data to allow for indicators to warm up
    trading_data = data[long_window:]
    
    for i, candle in enumerate(trading_data):
        timestamp = candle['timestamp']
        current_price = candle['close']
        
        # Record equity at this point
        equity = balance if position is None else balance + position['size