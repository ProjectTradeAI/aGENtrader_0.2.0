symbol} from {args.start_date} to {args.end_date}")
    
    # Generate mock market data
    data = generate_mock_market_data(
        symbol=args.symbol,
        start_date=args.start_date,
        end_date=args.end_date,
        interval=args.interval
    )
    
    # Run backtest
    results = run_simple_backtest(
        data=data,
        initial_balance=args.initial_balance,
        risk_per_trade=args.risk_per_trade
    )
    
    # Save results
    output_file = os.path.join(
        args.output_dir,
        f"simplified_test_{args.symbol}_{args.interval}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    )
    
    with open(output_file, 'w') as f:
        json.dump(results, f, indent=2)
    
    end_time = time.time()
    logger.info(f"Test completed in {end_time - start_time:.2f} seconds")
    logger.info(f"Results saved to {output_file}")
    
    # Print summary
    print("\n=== SIMPLIFIED TEST RESULTS ===")
    print(f"Symbol: {args.symbol}, Interval: {args.interval}")
    print(f"Period: {args.start_date} to {args.end_date}")
    print(f"Initial Balance: ${args.initial_balance:.2f}")
    print(f"Final Balance: ${results['final_balance']:.2f}")
    print(f"Net Profit: ${results['net_profit']:.2f} ({results['return_pct']:.2f}%)")
    print(f"Win Rate: {results['win_rate']:.2f}%")
    print(f"Total Trades: {results['total_trades']}")
    print(f"Winning Trades: {results['winning_trades']}")
    print(f"Losing Trades: {results['losing_trades']}")
    print(f"Sharpe Ratio: {results['sharpe_ratio']:.2f}")
    print(f"Max Drawdown: {results['max_drawdown_pct']:.2f}%")
    print("================================")

if __name__ == "__main__":
    main()