Please check https://microsoft.github.io/autogen/stable/ where you can see the latest stable version is 0.5.3 whereas we have an output of Name: pyautogen, Version: 0.7.5 when entered pip show autogen command on shell. We need to use autogen core for orchestration as it is designed for event-driven, stateful, scalable multi-agent systems that allows more controllability over agentchat. Hence, we need to refactor our agent framework with autogen core instead with added extensions such as autogen_ext.models for local LLM usage, autogen_ext.executors for executing SQL queries, bash commands, docker builds, Python functions, etc.

Objective:
Refactor the current AutoGen-based agent system to use **AutoGen Core** instead of AgentChat for better orchestration control and extensibility.

Key Goals:
1. Migrate at least one agent (e.g., `market_analysis.py`) to AutoGen Core using the event-based agent model.
2. Integrate **local LLM support** using `autogen_ext.models.ollama.OllamaChatCompletionClient` 
3. Use `autogen_ext.executors.PythonCodeExecutor` inside that agent to simulate a DB access or computation module (e.g., to fetch and evaluate market data).
4. Modularize the agent logic so other agents can be migrated similarly.
5. Preserve compatibility with the existing orchestrator (`collaborative_trading_framework.py`) or create a new orchestrator based on `AgentGroup` or custom event loop using `AutoGen Core`.

Directory: `agents/`
Agent to refactor first: `market_analysis.py`

Tools Provided:
- Python
- Ability to install `autogen`, `autogen-ext`, `ollama` or other necessary packages
- Access to shared modules in `utils/`, `shared/`, and `orchestration/`

Important:
- Keep agent role & objective the same
- Output should be modular (separate class or function)
- Add comments for each significant change
- Use environment variables or config for API/model configs
- Make sure the agent logs events or states for future decision history

Stretch Goals (if time permits):
- Implement a prototype orchestrator using `AutoGen Core` event loop
- Demonstrate agent-to-agent messaging using AutoGen Core
- Add simple caching or memory logging layer using SQLite or file

Once this agent is working, I will replicate the same architecture to `liquidity_analysis.py`, and others.

Start by listing the necessary dependency changes, code refactors, and architecture plan, then begin implementing step-by-step.
