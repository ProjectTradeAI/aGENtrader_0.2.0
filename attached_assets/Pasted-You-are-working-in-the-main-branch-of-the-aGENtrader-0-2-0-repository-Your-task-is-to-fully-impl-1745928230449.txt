You are working in the `main` branch of the aGENtrader_0.2.0 repository.

Your task is to fully implement live liquidity data fetching and analysis for the LiquidityAnalystAgent.

Currently, the `get_market_depth()` method and liquidity data retrieval are not fully implemented, resulting in "No data available" warnings.  
You will fix this by pulling real-time order book data from Binance and integrating it into LiquidityAnalystAgent's decision logic.

---

### 🎯 Objectives

✅ Implement live market depth fetching using Binance API `/api/v3/depth`  
✅ Update DatabaseConnector and/or DataProvider layer to fetch liquidity data properly  
✅ Update LiquidityAnalystAgent to analyze order book snapshots intelligently  
✅ Generate liquidity-based trading signals (BUY/SELL/HOLD)  
✅ Improve fallback error handling and logging for liquidity analysis

---

### 📁 Tasks

#### 1. Implement Market Depth Fetching
In `data_provider/binance_data_provider.py` (or appropriate module):

Add a new method:
```python
def fetch_market_depth(self, symbol: str, limit: int = 100) -> dict:
    """Fetch live order book snapshot for a symbol from Binance."""
    # Use Binance REST API /api/v3/depth
    # Example endpoint: https://api.binance.com/api/v3/depth?symbol=BTCUSDT&limit=100
    # Return bids, asks in structured dict
✅ Fetch top N bids and asks (e.g., limit = 100).

✅ Normalize into a clean dictionary:

python
Copy
Edit
{
  "bids": [[price, quantity], [price, quantity], ...],
  "asks": [[price, quantity], [price, quantity], ...]
}
2. Update DatabaseConnector (Optional)
If you prefer, allow DatabaseConnector to call Binance directly if no local cache exists.
Otherwise, LiquidityAnalystAgent can call Binance API directly via DataProvider.

3. Update LiquidityAnalystAgent Logic
In agents/liquidity_analyst_agent.py:

Modify liquidity analysis step to:

✅ Fetch market depth using agent's timeframe-configured symbol.

✅ Analyze:

Top 5 bid volume vs. top 5 ask volume

Mid-price (spread between best bid and ask)

Volume imbalance percentage

Example simple analysis:

python
Copy
Edit
bid_volume = sum(price * quantity for price, quantity in top_5_bids)
ask_volume = sum(price * quantity for price, quantity in top_5_asks)

if bid_volume > ask_volume * 1.2:
    signal = "BUY"
elif ask_volume > bid_volume * 1.2:
    signal = "SELL"
else:
    signal = "HOLD"
✅ Confidence can be proportional to the volume imbalance strength.

4. Improve Logging
When liquidity analysis is complete:

✅ Log something like:

text
Copy
Edit
LiquidityAnalystAgent (1h): BUY 78% - Reason: Bid volume 25% stronger than ask volume
✅ If Binance API fails or depth not available, gracefully fallback to HOLD with low confidence.

✅ Acceptance Criteria
LiquidityAnalystAgent uses live order book data from Binance

LiquidityAgent produces real BUY/SELL/HOLD signals based on liquidity metrics

No "No data available" warnings during normal operation

Logs show liquidity signal generation transparently

DecisionAgent now aggregates liquidity decisions into overall trade calls