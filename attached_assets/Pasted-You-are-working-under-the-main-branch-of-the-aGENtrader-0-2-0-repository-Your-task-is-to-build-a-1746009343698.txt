You are working under the `main` branch of the aGENtrader_0.2.0 repository.

Your task is to build a modular test utility script that allows targeted, transparent testing of individual agents in isolation.

This will help debug agent logic, audit LLM outputs, validate reasoning processes, and improve system reliability.

---

### 🎯 Objectives

✅ Create a script `tests/test_agent_individual.py`  
✅ Allow running a single agent with controlled input data  
✅ Show full internal decision process including prompts, LLM completions, and reasoning  
✅ Support deterministic testing (temperature=0) for reproducibility  
✅ Allow flexible agent selection via CLI arguments

---

### 📋 Script Behavior

#### 1. CLI Arguments
Use `argparse` to support:

- `--agent` → Specify agent class (e.g., `TechnicalAnalystAgent`, `LiquidityAnalystAgent`, etc.)
- `--symbol` → Trading pair symbol (e.g., `BTC/USDT`)
- `--interval` → Timeframe (e.g., `1h`, `4h`)
- `--mock-data` → Optional, simulate input data instead of live fetch
- `--temperature` → Control LLM randomness (default: 0.0 for testing)
- `--explain` → Print full prompt sent to LLM and the completion received
- `--repeat N` → Run N iterations to observe variability (optional)

✅ Example usage:

```bash
python tests/test_agent_individual.py --agent TechnicalAnalystAgent --symbol BTC/USDT --interval 4h --mock-data --temperature 0.0 --explain --repeat 3
2. Agent Initialization
Dynamically load the specified agent class

Inject config and mock or real data as needed

Set temperature if agent uses LLM (technical, sentiment, etc.)

3. Execution and Output
For each run:

Show timestamp

Show input parameters

Show generated LLM prompt (if applicable)

Show LLM response / completion

Show final agent decision:

Signal (BUY/SELL/HOLD)

Confidence score

Reasoning summary

✅ Colorize output if possible:

Success (green)

Warning (yellow)

Failure (red)

🛡️ Safety Features
✅ If agent name is invalid, show helpful error and list valid agents.
✅ If input parameters are missing, prompt user for correction.

✅ Acceptance Criteria
Running the script tests a single agent in full isolation

Mock or real data can be injected easily

Full agent "thinking" is shown — not just final output

Supports deterministic or random mode

CLI interface is clean and user-friendly