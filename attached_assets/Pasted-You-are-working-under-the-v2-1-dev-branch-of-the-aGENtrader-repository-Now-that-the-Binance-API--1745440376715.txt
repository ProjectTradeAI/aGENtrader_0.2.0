You are working under the `v2.1-dev` branch of the aGENtrader repository.

Now that the Binance API integration is complete and fully functional, your next task is to audit and fix any inconsistencies in OHLCV market data returned across different timeframes (1h, 4h, 1D).

---

### ‚úÖ Goals:
- Use the new `BinanceDataProvider` via `DataProviderFactory`
- Fetch OHLCV candles for BTC/USDT for 1h, 4h, and 1D intervals
- Ensure timestamps align within expected ranges
- Validate that price ranges across timeframes are realistic and synchronized
- Log findings for review and debugging

---

### üìÅ Tasks:

#### 1. Implement a Consistency Debug Script
File: `scripts/check_timeframe_consistency.py`

It should:
- Accept CLI args:
  ```bash
  --symbol BTC/USDT
  --intervals 1h 4h 1d
  --candles 20
For each interval, log:

interval

number of candles returned

start_time, end_time of the data

min_close_price, max_close_price

Write this to a new file:

bash
Copy
Edit
logs/timeframe_data_debug.jsonl
2. Add Utility to Align Start Times
Create a helper that ensures each timeframe‚Äôs data window ends on the same timestamp (e.g., now()) and subtracts the correct number of candles

Normalize timezones (UTC)

3. Validate Output
Run the script and output a summarized markdown table:

markdown
Copy
Edit
| Interval | Candles | Start       | End         | Price Min | Price Max |
|----------|---------|-------------|-------------|-----------|-----------|
| 1h       | 20      | 2025-04-22T08:00 | 2025-04-23T04:00 | $84,361   | $84,754   |
| 4h       | 20      | ...         | ...         | ...       | ...       |
Confirm that ranges between timeframes are compatible and consistent with recent BTC/USDT price action

üß™ Optional Test Hook
Create a CLI utility: python scripts/check_timeframe_consistency.py --symbol BTC/USDT --intervals 1h 4h 1d

Allow automated logging for nightly testing

‚úÖ Acceptance Criteria:
Data from all timeframes (1h, 4h, 1d) fetched using BinanceDataProvider is aligned to a consistent end time (UTC)

Prices make sense across intervals (no major mismatches like $94k vs $84k)

Log file (timeframe_data_debug.jsonl) is created and clean

CLI output confirms success and table is human-readable