Your task is to enhance the `TechnicalAnalystAgent` by providing it with a structured and extensible toolkit of technical indicators. This will enable the agent to make more nuanced, multi-signal trading decisions with improved reasoning and confidence scoring.

---

### üéØ Objectives

‚úÖ 1. Create a centralized indicator module

- Create a new module: `utils/indicators.py` (or `technical/indicators.py`)
- Implement the following indicators:

#### Core (already present or basic):
- RSI
- EMA (configurable)
- SMA
- MACD (with signal + histogram)

#### Additional Indicators to Implement:
- Bollinger Bands (%B and bandwidth)
- Stochastic RSI
- ADX (trend strength)
- VWMA
- Parabolic SAR
- Donchian Channels (20-period)
- Ichimoku Cloud (optional if feasible)
- ATR (volatility measurement)

Each indicator should be:
- Stateless (input: price/volume dataframe ‚Üí output: dict or value)
- Usable independently
- Return structured output

---

‚úÖ 2. Add an indicator aggregation function

- Create a method that returns a full structured indicator snapshot, e.g.:

```python
{
  "rsi": 68.2,
  "macd": {"value": 1.3, "signal": 0.9, "histogram": 0.4},
  "stoch_rsi": 74.1,
  "bb_percent": 0.88,
  "adx": 28.5,
  "vwma_trend": "bullish",
  "donchian_breakout": "upper",
  "atr": 245.7
}
Use pandas/numpy + ta or pandas_ta if needed (update requirements.txt if a library is introduced).

‚úÖ 3. Update TechnicalAnalystAgent to use this indicator set

Fetch indicators from the new module using current OHLCV data

Include these in the prompt to the LLM:

‚ÄúYou are a technical analyst. Use the indicators provided below to determine if BTC/USDT is in a bullish, bearish, or neutral state. Provide a confidence score and your reasoning.‚Äù

Add a section like:

markdown
Copy
Edit
### Indicator Snapshot:
RSI: 68.2
MACD Histogram: 0.4
ADX: 31.2
VWMA Trend: Bullish
Donchian Breakout: Upper Band
‚úÖ 4. Format LLM response

Ensure structured output:

json
Copy
Edit
{
  "signal": "BUY",
  "confidence": 72,
  "reasoning": "RSI and MACD show bullish momentum. ADX confirms trend. VWMA crossover suggests continued strength."
}
Fallback to safe defaults if indicators are missing or unstable

‚úÖ 5. Add tests and validate

Create tests/test_indicators.py to validate calculations

Run the upgraded TechnicalAnalystAgent in both mock and real data modes using --explain

Print parsed indicators + decision output

‚úÖ Acceptance Criteria
Agent receives full technical indicator context

Prompt includes cleanly formatted values

LLM outputs show improved technical reasoning

Indicators are reusable and independently testable

Final signal reflects multi-indicator alignment